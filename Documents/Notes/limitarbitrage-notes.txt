a            ###### PART TWO: USE PREVIOUS DATA TO SET UP LIMIT BASED ORDERS #########
            # 
            # (ITERATION after first: check to see if limit orders have filled)
            #       if so, attempt market order, remove from list
            #        potentially double down on limit order if market is successful
            #        if not error handling
            #         initially it would just check 0 orders and say ok go on
            # call new function for each pairing that is attractive based on above data
            # open limit orders near highest bid lowest ask
            # wait for them to fill (set something in place to make sure they don't open
            #   a new one until they're filled)
            # probably keep a list of open orders
            #
            # more to come, probably start here
            ##########################################################################

            ############ PAIRING HEURISTIC / NEW LIST HERE ##########################
            # IF PAIRING IS ATTRACTIVE FOR SOME REASON
            # 	ADD TO SECONDARY LIST
            #########################################################################

        ################################################################################
        # SECONDARY LIST LOOP: USING COINS DESIGNATED TO BE ATTRACTIVE
        # DO THESE COINS FOR ??? ITERATIONS
        # for pairing in secondary_list
        # 	same arbitrage loop
        #   remove if out of quantity
        #   after X iterations || not enough currencies (??)
        #   remove certain currencies (update lists based on balances)
        #   break and do a main loop
        #
        # NOTE: Account balances needs to inform (???) listener when the accounts are rebalanced for favourable currencies;
        #             add them back into main to check for preference again
        ###############################################################################
