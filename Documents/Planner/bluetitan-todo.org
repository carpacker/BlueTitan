# todo.org
#+TITLE: TBD
#+OPTIONS:
# Carson Packer
# DESCRIPTION:
#    Main TODO doc for blue titan's automated trading system. Items are broken down by category 
#     starting with a general category for meta related items, the bots major category and the
#     components major category.

* General
- ErrorLibrary?
** Organization
All meta-organizational items such as readmes, todo lists and scheduling.

** READMEs
*** TODO Write general format for readmes by directory
** Planner
*** TODO Fill out syllabus.org
*** TODO Fill out this document (todo document)
*** TODO Fill out schedule.org
*** TODO Move genericWidget.org
** Prototyping
*** TODO Re-structure prototype document
*** TODO Finish first draft prototype document 
*** TODO Send to mohammad for editing
*** TODO Final draft prototype document
*** TODO Integrate goals into syllabus
** Documents
*** TODO Organize debuggin screenshots
*** TODO Changelog format
*** TODO Organize archive
*** TODO Prototype-master organize
*** TODO Organize notes
* Bots
** Arbitrage-Trader
*** General
    Reworking profit tracking in relation to performing withdrawal
*** ArbitrageMain
**** TODO if arbitrage_quantity == 0 error (?)
**** TODO Test that class variables pass through properly in new outer while loop
**** TODO Change LimitArbitrage createTrade call if needed
**** TODO Re-visit storage of failed arbitrages (~134)
***** TODO How to deal with asset metric stuff...
**** TODO Revisit profit boolean conditional
**** TODO Revisit returnbalances staging
**** TODO Possibly move marketArbitrage
**** TODO Return statements in market arbitrage (currently is like 2/3 for the stages)
**** TODO Rework partial fill clauses (starting 266, should be two of them)
**** TODO Success/failure prints
**** TODO Model rest of the if/else like the first staement
**** TODO Verify base asset function
**** TODO Run through limit arbitrage notes
**** TODO Add secondary list structure (???)
*** Arbitrage Library
**** TODO checkMinOrder: Print out exchange in the future [if order_size<notional]
**** TODO generic checkMinOrder (?)
**** TODO decideOrder: Future involves more complex weighting to decide which exchange is more liquid
**** TODO determineOrderSize: Rework
**** TODO determineOrderSize: Variable quantity/price for neural network(?)
**** TODO evaluatePairing: Describe outputs
**** TODO evaluatePairing: Rework/evaluate arbitrage case section
**** TODO handleIncompleteArbitrage: rework
**** TODO getAggregateWFees: deprecate and rework
**** TODO Adding limit arbitrage functions
**** TODO LimitArbitrage createTrade
*** BalancingLibrary
Big picture:
- Automatic balancing
- Profit/valuation tracking such that withdrawals can be validated
- Transfer time checking

Not finished adding:
compareFAE, calculateFees, buildWithdrawList, balancePairings
**** TODO Add function list header like ArbitrageLibrary has
**** TODO retrieveIntendedFAE: Rework, currently a skeleton
**** TODO checkProfitability: Nothing there, finish
**** TODO rebalance: not profitable return & error stuff
**** TODO balancePairing: Maybe move buildWithdrawList outside of object for consistency

+ Possibly integrating into arbitrage library
+ Possibly move parts to fund manager
+ Test last loop buildCurrentFAE
+ Run through balancePairings
+ BalancePairing storeEntry actual values
+ Move tag check
*** DatabaseLibrary
**** TODO createTable: Vet tables again and possibly switch around order of columns
**** TODO initializeTables: FAE, fix up balances/assetinfo with new runtime database
**** TODO initializeBalances: Run through again, possibly adapt to fundAllocator
**** TODO initializeFAE/AssetInfo: Possibly rework into runtime database
**** TODO getPairings: ????
**** TODO getBalances & getAllBalances: revisit, commenting
*** README
**** TODO Explain function of market arbitrage
**** TODO Explain function of limit arbitrage
**** TODO Tie together the two in loop
** Coin-Categorizer
*** General
+ Possibly subdivide functions into libraries
+ Needs its own database
*** README
**** TODO Describe scoring system & categories
**** TODO Reworking pseudocode section
**** TODO Allocation method section
**** TODO Acquiring gcoins section
**** TODO Transcribe TODO at bottom
** Fund-Manager

*** TODO :: general
   - Review Metrics, bunch of inputs don't match up
   - Make variables more clear (assign names instead)
   - Generalize/partition parts of code
   - Implement 'running algorithms'
   - Fix changed items in helpers
   - Clean up, move around runHourly/daily
*** TODO :: by function
** Market-Tracker
** Performance-Tracker
** System-Controller
*** General
*** BlueTitan.py
- Fix class balance_dict print
- Adding in global balance in runtimedatabase, local allocated balance in local balances
- Writing limit Arbitrage main logic
? Change returns in market arbitrage
- Future decideOrder will be dependent on some weighted variable that changes over time based on other things happening
- Dealing with tables from system controller point of view
 - Possibly pass table names and exceptions as an argument with the algorithm
- More elegant system for FAE
- Brainstorm more scheduled events
- Add algorithm inputs (name, pairing stuff)
- Think about better way to do balancing/fund allocation based on runtime database
- Change this fae_list thing
- Remove superclean 
* Components
** Crypto-API
NOTE: Possibly move generic API for everything to a bigger file, then everything imports by class
so from cryptoAPI import ...
then, cryptoAPI has like miningapi, exchangeapi
** Database-Manager
*** TODO :: general
   - Moving databases to their own folderu
   - Retrieval using uuid
   - Uuid creation
   - Uuid insertion
*** TODO :: by function
   - getEntry/getEntries
   - deleteEntry
   - deleteEntries

*** TODO :: test
   - createUuid
   - Base tester flow
** Front-End
** Heuristic-Processor
** Maintenance
** Market-Simulation
** Mining
*** TODO : immediate
   - Test autostart.sh
   - Overclock 1 gpu
   - List of GPUs, default, ideal settings in github
   - Port settings to github
*** Tidbits
   Initial set up for a rig :: Starts after the below maintenance sweep
   - Pre-requisite packages installed (todo compile list)
   - autostart, clear logs, mine-start scripts set up
   - Settings filled out
   - Names/passwords set according to existing organizational scheme.

   Maintenance flow for updating rigs
   - Update ubuntu (re-install if necessary)
   - Download latest mining version; test each with old drivers
   - Download new video drivers, uninstall old ones; install new ones
   - Test mining with new drivers; revert if they don't work

** Performance-Analysis
** Records-Analysis
** Web-scraper
** Graphing
** Libraries
*** PrintLibrary
**** TODO Add list of headers for displayVariables
**** TODO Check message function exists
**** TODO Inherent error integration
**** TODO errorMessage function 
* Tests
** APITests.py
*** TODO Edit file description
