# blue-titanTD.org
# Carson Packer
# DESCRIPTION:
#    Main TODO doc for blue titan's automated trading system.

CURRENT STEPS: 
+ Finish Generalized Database
+ Finish SystemController
+ Create runtimeDatabase
+ Setting up second computer
+ Resume runtime testing
+ Profit Liquidation
+ Complete balancing

* General

** Organization
All meta-organizational items such as readmes, todo lists and scheduling.

** READMEs
*** TODO Write general format for readmes by directory
** Planner
** Prototyping
*** TODO Re-structure prototype document
    
** Document
* Bots
** Arbitrage-Trader
*** General
Big tasks
 + Reworking profit tracking in relation to performing withdrawals
 + Laying own limit arbitrage foundation
 + Add error tracking via PrintLibrary
Specific tasks
 + Rework decideOrder
 + Rework determineOrdersize
 + Generic checkMinOrder
 + Skeleton functions for limit arbitrage in arbitrage library
 + PrintLibrary message function

Arbitrage
 + if arbitrage_quantity == 0 error @ ~320
 + determineOrderSize variable quantity/ratio...
   + allow for scaling
   + possible neural network
 + evaluatePairing comments
 + Reworking getAggregateWFees
   + Possibly replace the function
   + Break into small parts

*** ArbitrageMain
*** ArbitrageLibrary
**** TODO checkMinOrder: Print out exchange in the future [if order_size<notional]
**** TODO decideOrder: Future involves more complex weighting to decide which exchange is more liquid
**** TODO determineOrderSize: Rework
**** TODO evaluatePairing: Describe outputs
**** TODO evaluatePairing: Rework/evaluate arbitrage case section
**** TODO handleIncompleteArbitrage: rework
**** TODO getAggregateWFees: deprecate and rework
*** BalancingLibrary
+ Vetting and reworking file
+ Adding in changes to database library and all that
+ Possibly integrating into arbitrage library
+ Possibly move parts to fund manager
+ Test last loop buildCurrentFAE
+ Run through balancePairings
+ BalancePairing storeEntry actual values
+ Move tag check
*** DatabaseLibrary
**** TODO createTable: Vet tables again and possibly switch around order of columns
**** TODO initializeTables: FAE, fix up balances/assetinfo with new runtime database
**** TODO initializeBalances: Run through again, possibly adapt to fundAllocator
**** TODO initializeFAE/AssetInfo: Possibly rework into runtime database
**** TODO getPairings: ????
**** TODO getBalances & getAllBalances: revisit, commenting
** Coin-Categorizer
** Fund-Manager

*** TODO :: general
   - Review Metrics, bunch of inputs don't match up
   - Make variables more clear (assign names instead)
   - Generalize/partition parts of code
   - Implement 'running algorithms'
   - Fix changed items in helpers
   - Clean up, move around runHourly/daily
*** TODO :: by function
** Market-Tracker
** Performance-Tracker
** System-Controller
*** General
*** BlueTitan.py
- Fix class balance_dict print
- Adding in global balance in runtimedatabase, local allocated balance in local balances
- Writing limit Arbitrage main logic
? Change returns in market arbitrage
- Future decideOrder will be dependent on some weighted variable that changes over time based on other things happening
- Dealing with tables from system controller point of view
 - Possibly pass table names and exceptions as an argument with the algorithm
- More elegant system for FAE
- Brainstorm more scheduled events
- Add algorithm inputs (name, pairing stuff)
- Think about better way to do balancing/fund allocation based on runtime database
- Change this fae_list thing
- Remove superclean 
* Components
** Crypto-API
** Database-Manager
*** TODO :: general
   - Moving databases to their own folderu
   - Retrieval using uuid
   - Uuid creation
   - Uuid insertion
*** TODO :: by function
   - getEntry/getEntries
   - deleteEntry
   - deleteEntries

*** TODO :: test
   - createUuid
   - Base tester flow
** Front-End
** Heuristic-Processor
** Maintenance
** Market-Simulation
** Mining
*** TODO : immediate
   - Test autostart.sh
   - Overclock 1 gpu
   - List of GPUs, default, ideal settings in github
   - Port settings to github
*** Tidbits
   Initial set up for a rig :: Starts after the below maintenance sweep
   - Pre-requisite packages installed (todo compile list)
   - autostart, clear logs, mine-start scripts set up
   - Settings filled out
   - Names/passwords set according to existing organizational scheme.

   Maintenance flow for updating rigs
   - Update ubuntu (re-install if necessary)
   - Download latest mining version; test each with old drivers
   - Download new video drivers, uninstall old ones; install new ones
   - Test mining with new drivers; revert if they don't work

** Performance-Analysis
** Records-Analysis
** Web-scraper
** Graphing
** Libraries
*** 
