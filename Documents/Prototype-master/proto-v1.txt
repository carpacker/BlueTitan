# Introduction
This document contains all information pertaining to the release of the first version of running
prototype of algorithmic trading software labeled "BlueTitan". The intent is for this piece of
software to maintain autonomous, repetitive trading strategies in order to leverage the
inefficiencies of a market and generate profit. The current version's purpose is to demonstrate
a running version of the bot and to provide a basis of data in which to optimize and improve
its performance. The following task list comprises of the criteria that needs to be met in order
for this bot to be considered 'running'. The target date is August 1st.

# General
The primary focus is to run an algorithm using fleshed out 'foundational' components such as
database management and API features. Since these components are important in the grand scheme of
things, but aren't necessarily useful independent of each other, the developed arbitrage algorithm
will act as the proof of concept, what will be used to demonstrate the functionality. There are
still some routine items that must be handled, since this is the first official version of the
trading bot.

## Linux Server Set-up
# TODO: synopsis

## Project ORG
- Note folder description
- Org docs
- Auto notes
- Description of readmes
- Fill out light outline of most important READMEs. This includes all READMEs for top level
  directories.
  
# Arbitrage

Arbitrage will serve as the primary algorithm for this version of the prototype. It is an
algorithm that is not necessarily consistently profitable, but one of the easiest algorithms that
can be used for guaranteed profit when used. There is a small degree of speculation in relation to
other algorithms that could be used in its place. What is left to finish for runtime is robust
balancing and conversion to higher level controller

## Balancing

One of the more complicated components, a significant amount of work has already been done on the
balancing system. The current tasks involve finishing a clean single balancing action (at
initialization) and a developed automatic balancing feature.

The important tasks for balancing include:
* [ ] - Option not to balance on initialization
* [ ] - Initialization balancing
* [ ] - Automatic balancing after trading
* [ ] - Accounting for withdrawal fees
* [ ] - Ensuring no loss of profit
* [ ] - Rebalancing occasionally based on change in price of assets

## System Controller

The next significant feature to be implemented is a true top-level controller. Rather than running
everything through the arbitrage script, there will be an explicit component in place that's role
is to manage the system. This is the system controller. For the prototype, all that is necessary is
porting the previous base functionality.

* [ ] - Configure and test scheduled events
* [ ] - Configure arbitrage and main inits properly
* [ ] - Add in any new scheduling (liquidation)


# Profit Tracking

After running an algorithm, the next most important feature is a system that keeps track of running profit.

##  Metrics
TODO synopsis

* [ ] - 
##  Liquidation
TODO synopsis


# Database Management
TODO intro
## GenericDatabase
TODO:  GENERALIZED DATABASE
TODO:  SPECIFIC DATABASELIBRARIES
## MySQL
